//***************************************************************
//                   HEADER FILE USED IN PROJECT
//****************************************************************
#include <iostream>
#include<fstream>
#include<conio.h>
#include<stdio.h>
#include<process.h>
#include<string.h>
#include<iomanip>
using namespace std;

/* <process.h> is a C++ header file which contains function declarations and macros used in working with threads and processes.*/
/* iomanip is a library that is used to manipulate the output of C++ program.*/


//***************************************************************
//                   CLASS USED IN PROJECT
//****************************************************************


class book
{
	char bno[20];/*bno defines book number*/
	char bname[50];/*bname defines book name*/
	char aname[20];/*aname defines author name*/
  public:
	void create_book()
	{
        cout<<"\n\t...NEW BOOK ENTRY...\n";
        cout<<"\n\tEnter The book Number: ";
        cin>>bno;
        fflush(stdin);
        /* fflush() is typically used for output stream only.
        Its purpose is to clear (or flush) the output buffer and move the buffered data to console (in case of stdout)
        or disk (in case of file output stream)*/
        cout<<"\n\tEnter The Name of The Book: ";
        gets(bname);
        fflush(stdin);
        cout<<"\n\tEnter The Author's Name: ";
        gets(aname);
        cout<<"\n\n\t...Book Created...";
    }

    void show_book()//showing book details while book issue/modify etc
    {
        cout<<"\n\tBook Number: "<<bno;
        cout<<"\n\tBook Name: ";
        puts(bname);
        cout<<"\tAuthor Name: ";
        puts(aname);
    }

    void modify_book()//function used while using modifying
    {
        cout<<"\n\tNew Book Number: ";
        cin>>bno;
        cout<<"\n\tNew Modified Book Name: ";
        fflush(stdin);
        gets(bname);
        fflush(stdin);
        cout<<"\n\tNew Modified Author's Name: ";
        gets(aname);
    }

    char* retbno()//return book no
    {
        return bno;
    }

    void report()//displaying all stud details
    {cout<<"\t"<<bno<<setw(30)<<bname<<setw(30)<<aname<<endl;}


};         //class ends here




class student
{
        char admno[20];//admission number
        char name[20];
        char stbno[20];
        int token;
    public:
        void create_student()
        {

            cout<<"\n\t...NEW STUDENT ENTRY...\n";
            cout<<"\n\n\tEnter The USN: ";
            cin>>admno;
            cout<<"\n\tEnter The Name of The Student: ";
            cin>>gets(name);
            fflush(stdin);
            token=0;
            stbno[0]='/0';
            cout<<"\n\n\t...Student Record Created...";
        }

        void show_student()//displays after input usn is given
        {
            cout<<"\n\tUSN: "<<admno;
            cout<<"\n\tStudent Name: ";
            puts(name);//default \n is applied after this
            cout<<"\n\tNo of Book issued is: "<<token;
            if(token==1)
            cout<<"\n\tBook No: "<<stbno;
        }

        void modify_student()//after old usn is given
        {
            cout<<"\n\tNew Modified Student USN: ";
            cin>>admno;
            cout<<"\n\tNew Modified Student Name : ";
            fflush(stdin);
            gets(name);
            fflush(stdin);
        }

        char* retadmno()
        {
            return admno;
        }

        char* retstbno()
        {
            return stbno;
        }

        int rettoken()
        {
            return token;
        }

        void addtoken()
        {token=1;}

        void resettoken()
        {token=0;}

        void getstbno(char t[])
        {
            strcpy(stbno,t);
        }

        void report()
        {cout<<"\t"<<admno<<setw(20)<<name<<setw(13)<<token<<endl;}

};         //class ends here




//***************************************************************
//        global declaration for stream object, object
//****************************************************************

fstream fp,fp1;
book bk;
student st;


//***************************************************************
//        function to write in file
//****************************************************************

void write_book()//option 6
{
    char ch;
    fp.open("book.txt",ios::out|ios::app);////**** Creating book.txt ****/////
    do
    {

        bk.create_book();
        fp.write((char*)&bk,sizeof(book));
        cout<<"\n\n\tWould You Like To Add More Record?(y/n)";
        cin>>ch;
    }while(ch=='y'||ch=='Y');
    fp.close();
}

void write_student()//option 1
{
    char ch;
    fp.open("student.txt",ios::out|ios::app);/////***** creating student.txt ******///////
    do
    {
        st.create_student();
        fp.write((char*)&st,sizeof(student));
        cout<<"\n\n\tWould You Like To Add More Record?(y/n)";
        cin>>ch;
    }while(ch=='y'||ch=='Y');
    fp.close();
}


//***************************************************************
//        function to read specific record from file
//****************************************************************


void display_spb(char n[])//option 7
{
    cout<<"\n\t...BOOK DETAILS...\n";
    int flag=0;
    fp.open("book.txt",ios::in);
    while(fp.read((char*)&bk,sizeof(book)))
    {
        if(strcmpi(bk.retbno(),n)==0)
        {
            bk.show_book();
            flag=1;
        }
    }

    fp.close();
    if(flag==0)
        cout<<"\n\n\t...Book Doesn't Exist...";
    getch();
}

void display_sps(char n[])//option 2
{
    cout<<"\n\t...STUDENT DETAILS...\n";
    int flag=0;
    fp.open("student.txt",ios::in);
    while(fp.read((char*)&st,sizeof(student)))
    {
        if((strcmpi(st.retadmno(),n)==0))
        {
            st.show_student();
            flag=1;
        }
    }

    fp.close();
    if(flag==0)
            cout<<"\n\n\tStudent record does not exist";
    getch();
}


//***************************************************************
//        function to modify record of file
//****************************************************************


void modify_book()
{
    char n[20];
    int found=0;

    cout<<"\n\n\t...MODIFY BOOK REOCORD... ";
    cout<<"\n\n\tEnter The book Number of the Book to Modify:";
    cin>>n;
    fp.open("book.txt",ios::in|ios::out);
    while(fp.read((char*)&bk,sizeof(book)) && found==0)
    {
        if(strcmpi(bk.retbno(),n)==0)
        {
            bk.show_book();
            cout<<"\n\tEnter The New Details of book"<<endl;
            bk.modify_book();
            int pos=-1*sizeof(bk);
                fp.seekp(pos,ios::cur);
                fp.write((char*)&bk,sizeof(book));
                cout<<"\n\n\t...Record Updated...";
                found=1;
        }
    }

        fp.close();
        if(found==0)
            cout<<"\n\n\t...Record Not Found...";
        getch();
}


void modify_student()
{
    char n[20];
    int found=0;

    cout<<"\n\n\t...MODIFY STUDENT RECORD... ";
    cout<<"\n\n\tEnter The USN of The student (whose record is to be modified) :";
    cin>>n;
    fp.open("student.txt",ios::in|ios::out);
    while(fp.read((char*)&st,sizeof(student)) && found==0)
    {
        if(strcmpi(st.retadmno(),n)==0)
        {
            st.show_student();
            cout<<"\n\n\tEnter The New Details of student"<<endl;
            st.modify_student();
            int pos=-1*sizeof(st);
            fp.seekp(pos,ios::cur);
            fp.write((char*)&st,sizeof(student));
            cout<<"\n\n\t...Record Updated...";
            found=1;
        }
    }

    fp.close();
    if(found==0)
        cout<<"\n\n\t...Record Not Found... ";
    getch();
}

//***************************************************************
//        function to delete record of file
//****************************************************************


void delete_student()
{
    char n[20];
    int flag=0;

        cout<<"\n\n\n\t...DELETE STUDENT RECORD...";
        cout<<"\n\n\tEnter The USN of the Student You Want To Delete : ";
        cin>>n;
        fp.open("student.txt",ios::in|ios::out);
        fstream fp2;
        fp2.open("Temp.txt",ios::out);
        fp.seekg(0,ios::beg);
        while(fp.read((char*)&st,sizeof(student)))
    {
        if(strcmpi(st.retadmno(),n)!=0)
                 fp2.write((char*)&st,sizeof(student));
        else
               flag=1;
    }

    fp2.close();
        fp.close();
        remove("student.txt");
        rename("Temp.txt","student.txt");
        if(flag==1)
             cout<<"\n\n\t...Record Deleted...";
        else
             cout<<"\n\n\t...Record not Found...";
        getch();
}


void delete_book()
{
    char n[20];

    cout<<"\n\n\t...DELETE BOOK...";
    cout<<"\n\n\tEnter The Book Number of the Book You Want To Delete: ";
    cin>>n;
    fp.open("book.txt",ios::in|ios::out);
    fstream fp2;
    fp2.open("Temp.txt",ios::out);
    fp.seekg(0,ios::beg);
    while(fp.read((char*)&bk,sizeof(book)))
    {
        if(strcmpi(bk.retbno(),n)!=0)
        {
            fp2.write((char*)&bk,sizeof(book));
        }
    }

    fp2.close();
    fp.close();
    remove("book.txt");
    rename("Temp.txt","book.txt");
    cout<<"\n\n\t...Record Deleted...";
    getch();
}



//***************************************************************
//        function to display all students list
//****************************************************************

void display_alls()
{

    fp.open("student.txt",ios::in);
    if(!fp)
    {
        cout<<"\n\n\t...ERROR!!! FILE COULD NOT BE OPEN / NO DETAILS TO DISPLAY...";
        getch();
        return;
    }

    cout<<"\n\n\t\t...STUDENT LIST...\n\n";
    cout<<"==================================================================\n";
    cout<<"\tUSN No."<<setw(10)<<"\t\t  Name"<<setw(20)<<"Book Issued\n";
    cout<<"==================================================================\n";

    while(fp.read((char*)&st,sizeof(student)))
    {
        st.report();
    }

    fp.close();
    getch();
}



//***************************************************************
//        function to display Books list
//****************************************************************

void display_allb()
{

    fp.open("book.txt",ios::in);
    if(!fp)
    {
        cout<<"\n\n\t...ERROR!!! FILE COULD NOT BE OPEN / NO DETAILS TO DISPLAY...";
               getch();
               return;
         }

    cout<<"\n\n\t\t...BOOK LIST...\n\n";
    cout<<"===============================================================================\n";
    cout<<"\tBook Number"<<setw(20)<<"\tBook Name"<<setw(25)<<"\tAuthor\n";
    cout<<"===============================================================================\n";

    while(fp.read((char*)&bk,sizeof(book)))
    {
        bk.report();
    }
         fp.close();
         getch();
}



//***************************************************************
//        function to issue book
//****************************************************************





void book_issue()
{
    char sn[20],bn[20];
    int found=0,flag=0;

    cout<<"\n\n\t...BOOK ISSUE ...";
    cout<<"\n\n\tEnter The Student's USN:";
    cin>>sn;
    fp.open("student.txt",ios::in|ios::out);
        fp1.open("book.txt",ios::in|ios::out);
        while(fp.read((char*)&st,sizeof(student)) && found==0)
           {
        if(strcmpi(st.retadmno(),sn)==0)
        {
            found=1;
            if(st.rettoken()==0)
            {
                cout<<"\n\tEnter the Book Number: ";
                cin>>bn;
                while(fp1.read((char*)&bk,sizeof(book))&& flag==0)
                {
                       if(strcmpi(bk.retbno(),bn)==0)
                    {
                        bk.show_book();
                        flag=1;
                        st.addtoken();
                        st.getstbno(bk.retbno());
                               int pos=-1*sizeof(st);
                        fp.seekp(pos,ios::cur);
                        fp.write((char*)&st,sizeof(student));
                        cout<<"\n\n\t...Book Issued Successfully...";
                        cout<<"\n\n\t*** Return the book within 15 days, else fine of 1Rs/day will be Imposed ***\n\n\tPress enter to go back to Main Menu";
                    }
                    }
                  if(flag==0)
                        cout<<"\n\n\t...Book Number does not Exist...";
            }
                else
                  cout<<"\n\n\t...You have not returned the last book...";

        }
    }
          if(found==0)
        cout<<"\n\n\t...Student record not exist...";
    getch();
      fp.close();
      fp1.close();
}

//***************************************************************
//        function to deposit book
//****************************************************************

void book_deposit()
{
    char sn[20],bn[20];
    int found=0,flag=0,day,fine;

    cout<<"\n\n\t...BOOK DEPOSIT...";
    cout<<"\n\n\tEnter The Students USN:";
    cin>>sn;
    fp.open("student.txt",ios::in|ios::out);
    fp1.open("book.txt",ios::in|ios::out);
    while(fp.read((char*)&st,sizeof(student)) && found==0)
       {
        if(strcmpi(st.retadmno(),sn)==0)
        {
            found=1;
            if(st.rettoken()==1)
            {
                while(fp1.read((char*)&bk,sizeof(book))&& flag==0)
                {
                   if(strcmpi(bk.retbno(),st.retstbno())==0)
                    {
                        bk.show_book();
                        flag=1;
                        cout<<"\n\n\tBook Deposited in Number of days:";
                        cin>>day;
                        if(day>15)
                        {
                           fine=(day-15)*1;
                           cout<<"\n\n\tAmount of Fine to be Deposited is: "<<fine;
                        }
                            st.resettoken();
                            int pos=-1*sizeof(st);
                            fp.seekp(pos,ios::cur);
                            fp.write((char*)&st,sizeof(student));
                            cout<<"\n\n\t...Book deposited successfully...";
                    }
                }
                if(flag==0)
                    cout<<"\n\n\t...Book Number Doesn't Exist";
              }
         else
            cout<<"\n\n\t...No Book is Issued...Please Check!!...";
        }
       }
      if(found==0)
    cout<<"\n\n\t...Student record not exist...";
    getch();
  fp.close();
  fp1.close();
}




//***************************************************************
//        INTRODUCTION FUNCTION
//****************************************************************

void intro()
{

    cout<<endl<<endl;
    cout<<"\n\t\t*********** LIBRARY MANAGEMENT SYSTEM ***********\n";

    cout<<"\n\t\tMADE BY :SHAYAN PAUL AND JEET ROY\n";
    cout<<"\n\t\tShayan=> USN:1VE18IS046\t\t||\tJeet=>\tUSN:1VE18IS019 \n";
    cout<<"\n\t\tDepartment Of Information Science And Engineering\n";

    cout<<"\n\t\t:)...Press enter to continue... :)   ";
    getch();
}


//***************************************************************
//        ADMINISTRATOR MENU FUNCTION
//***************************************************************

int admin_menu()
{

    int ch2;
    cout<<"\n\n\n\tADMINISTRATOR MENU";
    cout<<"\n\n\t1.CREATE STUDENT RECORD";
    cout<<"\n\n\t2.DISPLAY ALL STUDENTS RECORD";
    cout<<"\n\n\t3.DISPLAY SPECIFIC STUDENT RECORD ";
    cout<<"\n\n\t4.MODIFY STUDENT RECORD";
    cout<<"\n\n\t5.DELETE STUDENT RECORD";
    cout<<"\n\n\t6.CREATE BOOK ";
    cout<<"\n\n\t7.DISPLAY ALL BOOKS ";
    cout<<"\n\n\t8.DISPLAY SPECIFIC BOOK ";
    cout<<"\n\n\t9.MODIFY BOOK ";
    cout<<"\n\n\t10.DELETE BOOK ";
    cout<<"\n\n\t11.BACK TO MAIN MENU";
    cout<<"\n\n\tPlease Enter Your Choice (1-11): ";
    cin>>ch2;
    switch(ch2)
    {
            case 1:write_student();
                   break;
            case 2:display_alls();
                   break;
            case 3:char num[6];
                   cout<<"\n\n\tPlease Enter The USN: ";
                   cin>>num;
                   display_sps(num);
                   break;
            case 4:modify_student();
                   break;
            case 5:delete_student();
                   break;
            case 6:write_book();
                   break;
            case 7:display_allb();
                   break;
            case 8: {
                       char num[6];
                       cout<<"\n\n\tPlease Enter The Book Number: ";
                       cin>>num;
                       display_spb(num);
                       break;
                    }
            case 9:modify_book();
                   break;
            case 10:delete_book();
                    break;
            case 11:return 0;
            default:cout<<"\a";
    }
       admin_menu();
}


//***************************************************************
//        THE MAIN FUNCTION OF PROGRAM
//****************************************************************


int main()
{
    char ch;
    intro();
    do
    {

        cout<<"\n\n\n\tMAIN MENU";
        cout<<"\n\n\t01. BOOK ISSUE";
        cout<<"\n\n\t02. BOOK DEPOSIT";
        cout<<"\n\n\t03. ADMINISTRATOR MENU";
        cout<<"\n\n\t04. EXIT";
        cout<<"\n\n\tPlease Select Your Option (1-4): ";
        ch=getche();
        switch(ch)
        {
            case '1':book_issue();
                        break;
            case '2':book_deposit();
                        break;
            case '3':admin_menu();
                        break;
            case '4':intro();
            default :cout<<"\a";
        }
    }while(ch!='4');
}

//***************************************************************
//                END OF PROJECT
//***************************************************************
